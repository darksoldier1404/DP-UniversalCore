import static sun.security.util.Debug.println

plugins {
    id 'java'
    id 'maven-publish'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'com.darksoldier1404.duc'
            artifactId = 'DP-UniversalCore'
            version = '1.18.1-SNAPSHOT'
        }
    }
}
group 'github.com/darksoldier1404'
version = '1.0.6.155'


compileJava.options.encoding = 'UTF-8'
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    sourceCompatibility = JavaVersion.VERSION_16
}

task deleteMyFile(type: Delete) {
    delete "C:\\Minecraft Servers\\1.18 Play Ground\\plugins\\DP-UniversalCore-" + version + ".jar"
}
configurations {
    jar.archiveName = 'DP-UniversalCore-_v1_18_1-SNAPSHOT.jar'
}
task DS_BUILD {
    doFirst {
        def v = buildFile.getText().find(version)
        def (major, minor, patch, build) = v.tokenize('.')
        int newBuild = build.toInteger() + 1
        String newVersion = major + "." + minor + "." + patch + "." + newBuild
        String updatedVersion = buildFile.getText().replaceFirst("version = '" + v + "'", "version = '" + newVersion + "'")

        allprojects.forEach(p -> {
            p.buildFile.setText(p.buildFile.getText().replaceFirst("version = '" + v + "'", "version = '" + newVersion + "'"))
            println "Project Module : " + p.name
            p.sourceSets.main.resources.srcDirs().getFiles().forEach(o -> {
                if (o.getName().equals("plugin.yml")) {
                    List<String> lines = new ArrayList<String>()
                    String line
                    File f = o
                    println "File : " + f.getAbsolutePath()
                    FileReader fr = new FileReader(f)
                    BufferedReader br = new BufferedReader(fr)
                    while ((line = br.readLine()) != null) {
                        if(line.contains("version") && !line.contains("api")) {
                            line = "version: " + newVersion
                        }
                        lines.add(line + "\n")
                    }
                    fr.close()
                    br.close()
                    BufferedWriter out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(f), "UTF-8"));
                    lines.forEach(out::write)
                    out.close()
                }
            })
        })
        buildFile.setText(updatedVersion)
    }
}
java {
    toolchain.languageVersion.set(JavaLanguageVersion.of(17))
}
repositories {
    mavenCentral()
    maven {
        name = "Paper"
        url "https://papermc.io/repo/repository/maven-public/"
    }
    maven {
        name = "Mojang"
        url = uri("https://libraries.minecraft.net/")
    }
    maven {
        name = "Spigot"
        url "https://repo.dmulloy2.net/repository/public/"
    }
    maven {
        name "essentialsx-releases"
        url "https://repo.essentialsx.net/releases/"
    }
    maven {
        url "http://dpnw.site:8081/repository/maven-public/"
        allowInsecureProtocol = true
    }
    maven {
        url "https://org.bstats/bstats-bukkit"
    }
    maven {
        url 'https://repo.spring.io/plugins-release/'
    }
}

dependencies {
    implementation 'org.jetbrains:annotations:20.1.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    compileOnly 'org.spigotmc:spigot:1.18-R0.1-SNAPSHOT'
    compileOnly 'net.essentialsx:EssentialsX:2.19.0'
    compileOnly "org.bstats:bstats-bukkit:2.2.1"
    compileOnly 'com.darksoldier1404.dvs:DP-VirtualStorage:1.0.0.41'
}
test {
    useJUnitPlatform()
}

